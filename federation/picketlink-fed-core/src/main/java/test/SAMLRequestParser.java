package test;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLDecoder;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;

import org.picketlink.identity.federation.core.util.Base64;


public class SAMLRequestParser {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		decode("PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjgwODAvc2VhbS1zcC9Bc3NlcnRpb25Db25zdW1lclNlcnZpY2Uuc2VhbSIgSUQ9IklEX2FhZDE1MzFjLTUzYjQtNDM0Ny1iMzJiLWM3OWJmZTRiNjE5ZSIgSW5SZXNwb25zZVRvPSJJRF8yNzU2YjAyNC00NzQyLTRmODAtYTY1Ny1jYWIyYTkyNjgzOWIiIElzc3VlSW5zdGFudD0iMjAxMi0wOC0xN1QxNToyNjoyMi4zODEtMDQ6MDAiIFZlcnNpb249IjIuMCI%2BPHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9pZHAtc2lnLzwvc2FtbDpJc3N1ZXI%2BPHNhbWxwOlN0YXR1cz48c2FtbHA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1scDpTdGF0dXM%2BPHNhbWw6QXNzZXJ0aW9uIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBJRD0iSURfYzNjMjJhOGItODYwZi00N2FjLTg2ZTYtMmVhOTAzZjNiMjRkIiBJc3N1ZUluc3RhbnQ9IjIwMTItMDgtMTdUMTU6MjY6MjIuMzU3LTA0OjAwIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sOklzc3VlciBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmN6aGFvPC9zYW1sOklzc3Vlcj48c2FtbDpTdWJqZWN0PjxzYW1sOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmN6aGFvPC9zYW1sOk5hbWVJRD48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI%2BPHNhbWw6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJJRF8yNzU2YjAyNC00NzQyLTRmODAtYTY1Ny1jYWIyYTkyNjgzOWIiIE5vdEJlZm9yZT0iMjAxMi0wOC0xN1QxNToyNjoyMi4zNDgtMDQ6MDAiIE5vdE9uT3JBZnRlcj0iMjAxMi0wOC0xN1QxNToyNjoyOS4zNTctMDQ6MDAiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo4MDgwL3NlYW0tc3AvQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlLnNlYW0iLz48L3NhbWw6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWw6U3ViamVjdD48c2FtbDpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxMi0wOC0xN1QxNToyNjoyMC4zNTctMDQ6MDAiIE5vdE9uT3JBZnRlcj0iMjAxMi0wOC0xN1QxNToyNjoyOS4zNTctMDQ6MDAiLz48c2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTItMDgtMTdUMTU6MjY6MjIuMzg5LTA0OjAwIj48c2FtbDpBdXRobkNvbnRleHQ%2BPHNhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPC9zYW1sOkF1dGhuQ29udGV4dD48L3NhbWw6QXV0aG5TdGF0ZW1lbnQ%2BPHNhbWw6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZSBGcmllbmRseU5hbWU9IkNvbnRhY3QiIE5hbWU9IkNvbnRhY3QiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dXJpIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPiZsdDtDb250YWN0Jmd0OyYjMTM7DQoJCSZsdDtGaXJzdE5hbWUmZ3Q7Q2hhcmxlcyZsdDsvRmlyc3ROYW1lJmd0OyYjMTM7DQoJCSZsdDtNaWRkbGVJbml0aWFsJmd0O04mbHQ7L01pZGRsZUluaXRpYWwmZ3Q7JiMxMzsNCgkJJmx0O0xhc3ROYW1lJmd0O1poYW8mbHQ7L0xhc3ROYW1lJmd0OyYjMTM7DQoJCSZsdDtFbWFpbEFkZHJlc3MmZ3Q7Y3poYW9AZGFudGVjb25zdWx0aW5nLmNvbSZsdDsvRW1haWxBZGRyZXNzJmd0OyYjMTM7DQoJCSZsdDtQaG9uZU51bWJlciZndDsmIzEzOw0KCQkJJmx0O0NvdW50cnlDb2RlJmd0OzEmbHQ7L0NvdW50cnlDb2RlJmd0OyYjMTM7DQoJCQkmbHQ7TnVtYmVyJmd0OzcwMzExMTIyMjImbHQ7L051bWJlciZndDsmIzEzOw0KCQkJJmx0O0V4dGVuc2lvbiZndDsxMjMmbHQ7L0V4dGVuc2lvbiZndDsmIzEzOw0KCQkmbHQ7L1Bob25lTnVtYmVyJmd0OyYjMTM7DQoJJmx0Oy9Db250YWN0Jmd0Ozwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBGcmllbmRseU5hbWU9IkNhcmQiIE5hbWU9IkNhcmQiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dXJpIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPiZsdDtDYXJkJmd0OyYjMTM7DQoJCSZsdDtJZCZndDsxJmx0Oy9JZCZndDsmIzEzOw0KCQkmbHQ7Tmlja05hbWUmZ3Q7Q2l0aSBCYW5rIERpYW1vbmRzJmx0Oy9OaWNrTmFtZSZndDsmIzEzOw0KCQkmbHQ7Q2FyZEhvbGRlck5hbWUmZ3Q7Q2hhcmxlcyBaaGFvJmx0Oy9DYXJkSG9sZGVyTmFtZSZndDsmIzEzOw0KCQkmbHQ7RGVmYXVsdENhcmQmZ3Q7dHJ1ZSZsdDsvRGVmYXVsdENhcmQmZ3Q7JiMxMzsNCgkJJmx0O0FjY291bnROdW1iZXImZ3Q7NTQ2MzUyNjMyMzIyNjQ3MyZsdDsvQWNjb3VudE51bWJlciZndDsmIzEzOw0KCQkmbHQ7RXhwaXJ5TW9udGgmZ3Q7MDUmbHQ7L0V4cGlyeU1vbnRoJmd0OyYjMTM7DQoJCSZsdDtFeHBpcnlZZWFyJmd0OzIwMTQmbHQ7L0V4cGlyeVllYXImZ3Q7JiMxMzsNCgkJJmx0O0JpbGxpbmdBZGRyZXNzJmd0OyYjMTM7DQoJCQkmbHQ7SWQmZ3Q7MSZsdDsvSWQmZ3Q7JiMxMzsNCgkJCSZsdDtMaW5lMSZndDsxMjMgTm9ydGggU3RyZWV0Jmx0Oy9MaW5lMSZndDsmIzEzOw0KCQkJJmx0O0NpdHkmZ3Q7QXJsaW5ndG9uJmx0Oy9DaXR5Jmd0OyYjMTM7DQoJCQkmbHQ7Q291bnRyeVN1YmRpdmlzaW9uJmd0O1ZpZ2luaWEmbHQ7L0NvdW50cnlTdWJkaXZpc2lvbiZndDsmIzEzOw0KCQkJJmx0O0NvdW50cnkmZ3Q7VVMmbHQ7L0NvdW50cnkmZ3Q7JiMxMzsNCgkJCSZsdDtQb3N0YWxDb2RlJmd0OzIyMDE5Jmx0Oy9Qb3N0YWxDb2RlJmd0OyYjMTM7DQoJCSZsdDsvQmlsbGluZ0FkZHJlc3MmZ3Q7JiMxMzsNCgkmbHQ7L0NhcmQmZ3Q7PC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU%2BPHNhbWw6QXR0cmlidXRlIEZyaWVuZGx5TmFtZT0iQ2FyZCIgTmFtZT0iQ2FyZCIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1cmkiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BJmx0O0NhcmQmZ3Q7JiMxMzsNCgkJJmx0O0lkJmd0OzImbHQ7L0lkJmd0OyYjMTM7DQoJCSZsdDtOaWNrTmFtZSZndDtDaXRpIEJhbmsgUmV3YXJkcyZsdDsvTmlja05hbWUmZ3Q7JiMxMzsNCgkJJmx0O0NhcmRIb2xkZXJOYW1lJmd0O0NoYXJsZXMgWmhhbyZsdDsvQ2FyZEhvbGRlck5hbWUmZ3Q7JiMxMzsNCgkJJmx0O0RlZmF1bHRDYXJkJmd0O3RydWUmbHQ7L0RlZmF1bHRDYXJkJmd0OyYjMTM7DQoJCSZsdDtBY2NvdW50TnVtYmVyJmd0OzYyMzQyNjMyMzIyNjI0NzMmbHQ7L0FjY291bnROdW1iZXImZ3Q7JiMxMzsNCgkJJmx0O0V4cGlyeU1vbnRoJmd0OzAxJmx0Oy9FeHBpcnlNb250aCZndDsmIzEzOw0KCQkmbHQ7RXhwaXJ5WWVhciZndDsyMDE1Jmx0Oy9FeHBpcnlZZWFyJmd0OyYjMTM7DQoJCSZsdDtCaWxsaW5nQWRkcmVzcyZndDsmIzEzOw0KCQkJJmx0O0lkJmd0OzEmbHQ7L0lkJmd0OyYjMTM7DQoJCQkmbHQ7TGluZTEmZ3Q7MTIzIE5vcnRoIFN0cmVldCZsdDsvTGluZTEmZ3Q7JiMxMzsNCgkJCSZsdDtDaXR5Jmd0O0FybGluZ3RvbiZsdDsvQ2l0eSZndDsmIzEzOw0KCQkJJmx0O0NvdW50cnlTdWJkaXZpc2lvbiZndDtWaWdpbmlhJmx0Oy9Db3VudHJ5U3ViZGl2aXNpb24mZ3Q7JiMxMzsNCgkJCSZsdDtDb3VudHJ5Jmd0O1VTJmx0Oy9Db3VudHJ5Jmd0OyYjMTM7DQoJCQkmbHQ7UG9zdGFsQ29kZSZndDsyMjAxOSZsdDsvUG9zdGFsQ29kZSZndDsmIzEzOw0KCQkmbHQ7L0JpbGxpbmdBZGRyZXNzJmd0OyYjMTM7DQoJJmx0Oy9DYXJkJmd0Ozwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjwvc2FtbDpBdHRyaWJ1dGVTdGF0ZW1lbnQ%2BPC9zYW1sOkFzc2VydGlvbj48ZHNpZzpTaWduYXR1cmUgeG1sbnM6ZHNpZz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGRzaWc6U2lnbmVkSW5mbz48ZHNpZzpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jV2l0aENvbW1lbnRzIi8%2BPGRzaWc6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8%2BPGRzaWc6UmVmZXJlbmNlIFVSST0iI0lEX2FhZDE1MzFjLTUzYjQtNDM0Ny1iMzJiLWM3OWJmZTRiNjE5ZSI%2BPGRzaWc6VHJhbnNmb3Jtcz48ZHNpZzpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2BPGRzaWc6RGlnZXN0VmFsdWU%2BOFNnYVVPK2FXUHhUQy84WU1ndWpKSkpxWHF3PTwvZHNpZzpEaWdlc3RWYWx1ZT48L2RzaWc6UmVmZXJlbmNlPjwvZHNpZzpTaWduZWRJbmZvPjxkc2lnOlNpZ25hdHVyZVZhbHVlPlV4Qlo2REdnT3lNN3JtWFErVGxOdXR6a3AxOG1mVnNCajQ1NmFvWlBjZmJaMk01VGJlVHdTL3QxQjc1SEU3dVVZOWkvT2RiR0tRaDcNCjdoaHJIYjJWNWo3b1dmMmJoUG1hVXJudTV2eGdocDVrU3A2S3k1SUx2MkhaNGdrUlJPeE9Ha1kzeG15R3JhYUVSZHlvVDlrK2ZGRXANCkxNWExNWm5rWXRhQVk5VW5RaUU9PC9kc2lnOlNpZ25hdHVyZVZhbHVlPjxkc2lnOktleUluZm8%2BPGRzaWc6S2V5VmFsdWU%2BPGRzaWc6UlNBS2V5VmFsdWU%2BPGRzaWc6TW9kdWx1cz5pdWtxYXY1Rko5QkFXQmhjNm5oanNQdkdRaUEzK3dMWlU5VTI2bERsMmZhLzBWVVpjL0ZLZTRVWTdBclR3b3FOTTBQVC9WUFQ0SzR1DQpWbTBEbUNHMVRweHhJQUszRlJMVjQzdDhVU1cvTnRQV3hFVVNZNVA1OTFaQy9DZGtEcEFjV2NpdDAzSVlIdGQ1MU5QYmovazFYcDNWDQp2NDllV2piNjFqRit6WjJNYzRVPTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ%2BPC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjwvc2FtbHA6UmVzcG9uc2U%2B", true, false);
	}

	private static void decode(String encoded, boolean urlDecode, boolean deflat)
			throws IOException {
		if ( urlDecode ) {
			encoded = URLDecoder.decode(encoded, "UTF-8");
		}
		byte[] decoded = Base64.decode(encoded);
		
		InputStream is = null;
		if ( deflat ) {
			is = new InflaterInputStream(new ByteArrayInputStream(decoded), new Inflater(true));
		} else {
			is = new ByteArrayInputStream(decoded);
		}
		
		byte[] deflated = new byte[4096];
		
		int len = is.read(deflated);
		
		byte[] result = new byte[len];
		
		System.arraycopy(deflated, 0, result, 0, len);
		
		System.out.println(new String(result));
	}

}
